{"version":3,"sources":["Board.js","index.js"],"names":["Cell","disabled","this","props","style","onClick","React","Component","Board","state","player","cellSpaces","gameOver","message","currentPlayer","spaces","horizontalCount","verticalCount","emptyCellCount","row","col","setState","cellButtons","push","e","target","backgroundColor","newGameSpaces","gameSpaces","checkWin","id","justifyContent","alignItems","display","flexDirection","height","color","textAlign","renderBoard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.726f313b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Creating a component for each cell\r\nclass Cell extends React.Component \r\n{\r\n  render() \r\n  {\r\n    return (\r\n      <button\r\n        disabled={this.props.disabled}\r\n        style={this.props.style}\r\n        onClick={this.props.onClick}\r\n      >____</button>\r\n    );\r\n  }\r\n}\r\n\r\n//Creating the component for the grid\r\nexport default class Board extends React.Component \r\n{\r\n  constructor(props) \r\n  {\r\n    super(props);\r\n    this.state = \r\n    {\r\n      player: \"Red\",\r\n      cellSpaces: [\r\n        [null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null],\r\n      ],\r\n      gameOver: false,\r\n      message: \"\",\r\n    };\r\n  }\r\n\r\n  //Function to check if the player won\r\n  checkWin() \r\n  {\r\n    let spaces = this.state.cellSpaces;\r\n    let horizontalCount = 0; // Checks horizontal win\r\n    let verticalCount = 0; // Checks vertical win\r\n    let emptyCellCount = 0; // Checks if all spaces are occupied\r\n    let currentPlayer;\r\n\r\n    //Checks to see if any cells are empty (null)\r\n    for (let row = 0; row < 6; row++) \r\n    {\r\n      for (let col = 0; col < 7; col++) \r\n      {\r\n        //If the cell is null, then add it to the nullCount\r\n        if (spaces[row][col] === null) \r\n        {\r\n          emptyCellCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    //If there is no empty cells, the game is over and display the message\r\n    if (emptyCellCount === 0) \r\n    {\r\n      this.setState({\r\n        gameOver: true,\r\n        message: \"Tie Game!\",\r\n      });\r\n    }\r\n\r\n    //Loop through the grid \r\n    for (let row = 0; row < 6; row++) \r\n    {\r\n      for (let col = 0; col < 7; col++) \r\n      {\r\n        //If the cells are empty\r\n        if (spaces[row][col] === null) \r\n        {\r\n          //There is no horoizontal count \r\n          horizontalCount = 0;\r\n          currentPlayer = null;\r\n        } \r\n\r\n        //If the cell is taken by the player\r\n        else if (spaces[row][col] === currentPlayer) \r\n        {\r\n          //Increase the horozontal count by 1\r\n          horizontalCount++;\r\n        } \r\n\r\n        //The current player takes the cell \r\n        else \r\n        {\r\n          horizontalCount = 1;\r\n          currentPlayer = spaces[row][col];\r\n        }\r\n\r\n        //If 4 horizontal cells together are taken by the player, then that player wins \r\n        if (horizontalCount >= 4) \r\n        {\r\n          this.setState({ gameOver: true, message: currentPlayer + \" Wins\" });\r\n        }\r\n      }\r\n    }\r\n\r\n    //Loop through the grid\r\n    for (let col = 0; col < 7; col++) \r\n    {\r\n      for (let row = 0; row < 6; row++) \r\n      {\r\n        //If the cells are empty\r\n        if (spaces[row][col] === null) \r\n        {\r\n          //There is no vertical count\r\n          verticalCount = 0;\r\n          currentPlayer = null;\r\n        } \r\n\r\n        //If the cell is taken by the player\r\n        else if (spaces[row][col] === currentPlayer) \r\n        {\r\n          //Increase the vertical count by 1\r\n          verticalCount++;\r\n        } \r\n\r\n        //The current player takes the cell \r\n        else \r\n        {\r\n          verticalCount = 1;\r\n          currentPlayer = spaces[row][col];\r\n        }\r\n\r\n        //If 4 vertical cells together are taken by the player, then that player wins \r\n        if (verticalCount >= 4) \r\n        {\r\n          this.setState({ gameOver: true, message: currentPlayer + \" Wins\" });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //A function to render the cell buttons \r\n  //Renders 6 rows and 7 columns of cell buttons\r\n  renderBoard() \r\n  {\r\n    //Creating an empty array to store the cell buttons\r\n    let cellButtons = [];\r\n\r\n    //Creating cell buttons corresponding to the grid size\r\n    for (let row = 0; row < 6; row++) \r\n    {\r\n      for (let col = 0; col < 7; col++) \r\n      {\r\n        //Add a cell button to the array\r\n        cellButtons.push(\r\n          <Cell\r\n            //Location of the cell button \r\n            key={row + \" \" + col}\r\n\r\n            //The cell button will be disabled when it is set to true or when the game is over\r\n            disabled={false || this.state.gameOver} \r\n\r\n            //When clicking the button\r\n            onClick={(e) => {\r\n              //Set the colour to current player's colour\r\n              e.target.style.backgroundColor = this.state.player;\r\n\r\n              //The cell button is now disabled\r\n              e.target.disabled = true;\r\n\r\n              //Update the state of the gameSpaces\r\n              let newGameSpaces = this.state.cellSpaces;\r\n              newGameSpaces[row][col] = this.state.player;\r\n              this.setState({ gameSpaces: newGameSpaces });\r\n\r\n              //Check to see if the player won\r\n              this.checkWin();\r\n\r\n              //Change the current player to the other player\r\n              this.setState({\r\n                player: this.state.player === \"Red\" ? \"Yellow\" : \"Red\",\r\n              });\r\n            }}\r\n          />\r\n        );\r\n      }\r\n\r\n      //Add the cell button to the proper location\r\n      cellButtons.push(<br key={row + \"br\"} />);\r\n    }\r\n    return cellButtons;\r\n  }\r\n\r\n  //Renders the template for the Connect 4 Game\r\n  render() \r\n  {\r\n    return (\r\n      <div id=\"gameDiv\" style={{justifyContent:'center', alignItems:'center', display: \"flex\", flexDirection: 'column', backgroundColor:\"#87ceeb\", height: '100vh'}}>\r\n        <h1 style={{color: \"red\", textAlign: \"center\"}}>Connect 4 Game</h1>\r\n        <div id=\"message\">\r\n          {this.state.gameOver\r\n            ? this.state.message\r\n            : this.state.player + \"'s Turn\"}\r\n        </div>\r\n        <div id=\"gridDiv\">{this.renderBoard()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n//Import the grid component\nimport Board from \"./Board\";\n\n//Render the Board component in the root container\nReactDOM.render(<Board />, document.getElementById(\"root\"));\n"],"sourceRoot":""}